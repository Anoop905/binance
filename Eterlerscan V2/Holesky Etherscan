# Argo İş Akışları ve CD CLI
audacioustux tarafından
Argo Workflows ve CD CLI'yi yükler

Ek bilgi için bu Özelliğin belgelerine bakın.

Kurulum
.

"ghcr.io/audacioustux/devcontainers/argo:1": {}
Copied!
Seçenekler
Seçenekler seçili Özellikte değişiklik yapılmasına izin verir. Bir seçeneğin atlanması Özellik tarafından belirlenen varsayılan değere geri dönülmesine neden olur.

Teklifleri temsil eden opsiyonlar ..., listelenenlerin dışında bir değeri kabul edecektir.

argocd

true (default)
false
argo

true (default)
false



"ghcr.io/audacioustux/devcontainers/argo:1": {}

ETHERSCAN_API_KEY=VZFDUWB3YGQ1YCDKTCU1D6DDSS
BSCSCAN_API_KEY=ZM8ACMJB67C2IXKKBF8URFUNSY
SNOWSCAN_API_KEY=ATJQERBKV1CI3GVKNSE3Q7RGEJ
ARBISCAN_API_KEY=B6SVGA7K3YBJEQ69AFKJF4YHVX
OPTIMISM_API_KEY=66N5FRNV1ZD4I87S7MAHCJVXFJ

ETHERSCAN_API_URL=https://api.etherscan.io/api
BSCSCAN_API_KEY=https://api.bscscan.com/api
SNOWSCAN_API_KEY=https://api.snowscan.xyz/api
ARBISCAN_API_KEY=https://api.arbiscan.io/api
OPTIMISM_API_KEY=https://api-optimistic.etherscan.io/api

const chains = [42161, 8453, 10, 534352, 81457]

for (const chain of chains) {

  // endpoint accepts one chain at a time, loop for all your chains
  const balance = fetch(`https://api.etherscan.io/v2/api?
     chainid=${chain}
     &module=account
     &action=balance
     &address=0xb5d85cbf7cb3ee0d56b3bb207d5fc4b82f43f511
     &tag=latest&apikey=YourApiKeyToken`)
     
}
V2 SSS
Özetle, son dakika değişiklikleri neler?
Hiçbir kesinti değişikliği yok. Tüm güncellemeler geriye dönük uyumludur, ancak daha kolay çoklu zincir uygulama geliştirme için V2'ye daha erken geçmenizi öneririz.

Zamanla V1'i kullanımdan kaldırmayı planladığımızı lütfen unutmayın.

Kaç zincir bir araya getirebilirim?
Uç noktamız aynı anda bir `chainId` kabul eder, erişmeniz gereken her zincir için sorguyu tekrarlamaktan çekinmeyin.

Destek sonu/değişiklik yapmak için son tarih var mı?
Henüz herhangi bir şeyi kullanımdan kaldırmak için bir zaman çizelgemiz yok.

Eski V1 belgelerine nasıl başvurabilirim?
Hala burada .

Faiz oranları nasıl hesaplanır?
Tıpkı daha önce olduğu gibi, planınıza bağlı olarak , saniye başına istek sınırı ve genel günlük sınırla.

Bunu yönetmek için, gönül rahatlığıyla programatik uyarılar ayarlayabilir veya gerektiğinde aşım ücretlerini etkinleştirebilirsiniz.
Logo
Eterlerscan V2
Daha

V2 Hızlı Başlangıç
Eğer V1'den geliyorsanız
Sorgunuz buna benzer bir şeye benziyor

Kopyala
https://api.etherscan.io/api?module=account&action=balance&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&tag=latest&apikey=YourApiKeyToken
Sadece temel URL'ye V2'yi ve bir chainIdparametreyi ekleyin

Kopyala
https://api.etherscan.io/v2/api?chainid=1&module=account&action=balance&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&tag=latest&apikey=YourApiKeyToken
Uç nokta bir seferde bir tane kabul eder, bu nedenle sorgulamak istediğiniz tüm zincirler için bunu tekrarlayınchainId 

Başka bir gezginden geliyorsanız, Basescan/Arbiscan/Polygonscan vb.
Sorgunuz buna benzer bir şeye benziyor

Kopyala
https://api.basescan.org/api?module=account&action=balance&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&tag=latest&apikey=YourApiKeyToken
Temel URL'nizi Etherscan olarak değiştirin ve chainId'yi 8453istediğiniz herhangi bir zincire yönlendirin

Kopyala
https://api.etherscan.io/v2/api?chainid=8453&module=account&action=balance&address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&tag=latest&apikey=YourApiKeyToken
Eğer V2 ile başlıyorsanız
Bu tam betiği Node JS ile çalıştırın,node script.js

async function main() {

    // query ETH balances on Arbitrum, Base and Optimism

    const chains = [42161, 8453, 10]

    for (const chain of chains) {

        // endpoint accepts one chain at a time, loop for all your chains
   
        const query = await fetch(`https://api.etherscan.io/v2/api
           ?chainid=${chain}
           &module=account
           &action=balance
           &address=0xb5d85cbf7cb3ee0d56b3bb207d5fc4b82f43f511
           &tag=latest&apikey=YourApiKeyToken`)
           
        const response = await query.json()

        const balance = response.result
        console.log(balance)

    }
}

main()
